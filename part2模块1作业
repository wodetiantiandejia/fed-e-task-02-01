简答题
1、谈谈你对工程化的初步认识，结合你之前遇到过的问题说出三个以上工程化能够解决问题或者带来的价值。
前端工程化主要应该从模块化、组件化、规范化、自动化四个方面来思考，
1模块化就是将一个大文件拆分成相互依赖的小文件，再进行统一的拼装和加载。只有这样，才有多人协作的可能。
2从UI拆分下来的每个包含模板(HTML)+样式(CSS)+逻辑(JS)功能完备的结构单元，我们称之为组件。
3模块化和组件化确定了开发模型，而这些东西的实现就需要规范去落实；
4规范化其实是工程化中很重要的一个部分，项目初期规范制定的好坏会直接影响到后期的开发质量；
前端工程化的很多脏活累活都应该交给自动化工具来完成。
解决的问题：
• 模块化与组件化: npm, es6,seajs, react/angularjs/Vue
• 代码版本管理: git
• 代码风格管理: jscs, editorconfig
• 代码编译: babel, less,sass,scss, imgmin, csssprit, inline-svg
• 代码质量管理 (QA): eslint, mocha
• 代码构建: webpack
• 项目脚手架: yeoman
• 持续集成/持续交付/持续部署: jenkins
进行工程化价值：
• 在配置初始项目文件结构和基本文件依靠命令行（工具）自动生成。
• 确定代码规范，缩进，换行，以及各种预编译工具less，coffee，保证输出代码的标准一致
• 对JS文件是否规范化，进行单元测试，不用手动复制到jshint上去检测，现在配置grunt监听文件变动自动检验显示检验结果还可以通过配置构建工具自动刷新浏览器实现文件实时变动监听。
• 以前压缩合并文件用手工复制到压缩工具然后复制到一个文件里面，现在配置一下 grunt，gulp可以做自动任务，实时编译，并且监测文件改变而做出响应。
• 以前发布到服务器上，要手动使用 FTP 软件上传，现在也可以用工具自动打包上传

2、你认为脚手架除了为我们创建项目结构，还有什么更深的意义？
脚手架本质上就是一套工具，由于在web2.0时代，应用变复杂后，出现了很多可以让前端开发效率提升的框架和标准及工具等等，可能这些新的代码方式远行环境还不支持，也许我们需要一个本地测试环境和运行环境及调试环境等，所以需要一套完整的工具帮我们处理问题及项目构建。
